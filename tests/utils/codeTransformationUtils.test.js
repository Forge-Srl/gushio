import {jest, describe, test, beforeAll, beforeEach, afterEach, afterAll, expect} from '@jest/globals'
import {transformCode} from '../../utils/codeTransformationUtils.js'

describe('codeTransformationUtils', () => {
    let transformCode

    beforeEach(async () => {
        transformCode = (await import('../../utils/codeTransformationUtils')).transformCode
    })

    describe('transformCode', () => {
        const codeTransformations = new Map()
        codeTransformations.set('simple lines', {
            before: [
                'const thisWontBeLogged = 123',
                'const neitherThis = (...args) => {',
                '    butThis.yes(...args)',
                '}',
                'export const run = async () => {',
                '    let foo = "asd"',
                '    const x = neitherThis(1, false, foo, [9, 0], {',
                '        key: value',
                '    })',
                '    foo = "other value"',
                '    console.log(`bar ${x} ${foo}`)',
                '    const f1 = () => { return fff(1) }',
                '    const f2 = () => fff(2)',
                '    const f3 = function() { return fff(3) }',
                '    const f4 = async function() { return await fff(4) }',
                '    const f5 = function*() { yield fff(5) }',
                '    const f6 = async function*() { yield await fff(5) }',
                '}'
            ].join('\n'),
            after: [
                'const thisWontBeLogged = 123;',
                'const neitherThis = (...args) => {',
                '  gushio.__trace__(3, 4, `butThis.yes(...args)`, {});',
                '  butThis.yes(...args);',
                '};',
                'export const run = async () => {',
                '  gushio.__trace__(6, 4, `let foo = "asd"`, {});',
                '  let foo = "asd";',
                '  gushio.__trace__(7, 4, `const x = neitherThis(1, false, foo, [9, 0], {',
                '        key: value',
                '    })`, {});',
                '  const x = neitherThis(1, false, foo, [9, 0], {',
                '    key: value',
                '  });',
                '  gushio.__trace__(10, 4, `foo = "other value"`, {});',
                '  foo = "other value";',
                '  gushio.__trace__(11, 4, `console.log(\\`bar $\\{x} $\\{foo}\\`)`, {});',
                '  console.log(`bar ${x} ${foo}`);',
                '  gushio.__trace__(12, 4, `const f1 = () => { return fff(1) }`, {});',
                '  const f1 = () => {',
                '    gushio.__trace__(12, 23, `return fff(1)`, {});',
                '    return fff(1);',
                '  };',
                '  gushio.__trace__(13, 4, `const f2 = () => fff(2)`, {});',
                '  const f2 = () => fff(2);',
                '  gushio.__trace__(14, 4, `const f3 = function() { return fff(3) }`, {});',
                '  const f3 = function () {',
                '    gushio.__trace__(14, 28, `return fff(3)`, {});',
                '    return fff(3);',
                '  };',
                '  gushio.__trace__(15, 4, `const f4 = async function() { return await fff(4) }`, {});',
                '  const f4 = async function () {',
                '    gushio.__trace__(15, 34, `return await fff(4)`, {});',
                '    return await fff(4);',
                '  };',
                '  gushio.__trace__(16, 4, `const f5 = function*() { yield fff(5) }`, {});',
                '  const f5 = function* () {',
                '    gushio.__trace__(16, 29, `yield fff(5)`, {});',
                '    yield fff(5);',
                '  };',
                '  gushio.__trace__(17, 4, `const f6 = async function*() { yield await fff(5) }`, {});',
                '  const f6 = async function* () {',
                '    gushio.__trace__(17, 35, `yield await fff(5)`, {});',
                '    yield await fff(5);',
                '  };',
                '};'
            ].join('\n')
        })

        codeTransformations.set('if', {
            before: [
                'if (true) {',
                '    something(1,2,3)',
                '} else {',
                '    other(1,2,3)',
                '}',
                'export const run = async () => {',
                '    if (true) {',
                '        something(1,2,3)',
                '    } else {',
                '        other(1,2,3)',
                '    }',
                '',
                '    if (true)',
                '        something(4,5,6)',
                '    else',
                '        other(4,5,6)',
                '}'
            ].join('\n'),
            after: [
                'if (true) {',
                '  gushio.__trace__(2, 4, `something(1,2,3)`, {});',
                '  something(1, 2, 3);',
                '} else {',
                '  gushio.__trace__(4, 4, `other(1,2,3)`, {});',
                '  other(1, 2, 3);',
                '}',
                'export const run = async () => {',
                '  gushio.__trace__(7, 4, `true`, {',
                '    "conditionalType": "if"',
                '  });',
                '  if (true) {',
                '    gushio.__trace__(8, 8, `something(1,2,3)`, {});',
                '    something(1, 2, 3);',
                '  } else {',
                '    gushio.__trace__(10, 8, `other(1,2,3)`, {});',
                '    other(1, 2, 3);',
                '  }',
                '  gushio.__trace__(13, 4, `true`, {',
                '    "conditionalType": "if"',
                '  });',
                '  if (true) {',
                '    gushio.__trace__(14, 8, `something(4,5,6)`, {});',
                '    something(4, 5, 6);',
                '  } else {',
                '    gushio.__trace__(16, 8, `other(4,5,6)`, {});',
                '    other(4, 5, 6);',
                '  }',
                '};'
            ].join('\n')
        })

        codeTransformations.set('switch', {
            before: [
                'switch (123) {',
                '    case 3:',
                '        x(y,x)',
                '        break',
                '    case 123:',
                '    case 15:',
                '        other()',
                '        break',
                '    default:',
                '        console.log(33)',
                '}',
                'export const run = async () => {',
                '    switch (123) {',
                '        case 3:',
                '            x(y,x)',
                '            break',
                '        case 123:',
                '        case 15:',
                '            other()',
                '            break',
                '        default:',
                '            console.log(33)',
                '    }',
                '}'
            ].join('\n'),
            after: [
                'switch (123) {',
                '  case 3:',
                '    gushio.__trace__(3, 8, `x(y,x)`, {});',
                '    x(y, x);',
                '    gushio.__trace__(4, 8, `break`, {});',
                '    break;',
                '  case 123:',
                '  case 15:',
                '    gushio.__trace__(7, 8, `other()`, {});',
                '    other();',
                '    gushio.__trace__(8, 8, `break`, {});',
                '    break;',
                '  default:',
                '    gushio.__trace__(10, 8, `console.log(33)`, {});',
                '    console.log(33);',
                '}',
                'export const run = async () => {',
                '  gushio.__trace__(13, 4, `123`, {',
                '    "conditionalType": "switch"',
                '  });',
                '  switch (123) {',
                '    case 3:',
                '      gushio.__trace__(15, 12, `x(y,x)`, {});',
                '      x(y, x);',
                '      gushio.__trace__(16, 12, `break`, {});',
                '      break;',
                '    case 123:',
                '    case 15:',
                '      gushio.__trace__(19, 12, `other()`, {});',
                '      other();',
                '      gushio.__trace__(20, 12, `break`, {});',
                '      break;',
                '    default:',
                '      gushio.__trace__(22, 12, `console.log(33)`, {});',
                '      console.log(33);',
                '  }',
                '};'
            ].join('\n')
        })

        codeTransformations.set('while', {
            before: [
                'while (condition) {',
                '    console.log(33)',
                '}',
                'export const run = async () => {',
                '    while (condition) {',
                '        console.log(33)',
                '    }',
                '',
                '    while (condition)',
                '        console.log(33)',
                '}'
            ].join('\n'),
            after: [
                'while (condition) {',
                '  gushio.__trace__(2, 4, `console.log(33)`, {});',
                '  console.log(33);',
                '}',
                'export const run = async () => {',
                '  gushio.__trace__(5, 4, `condition`, {',
                '    "loopType": "while"',
                '  });',
                '  while (condition) {',
                '    gushio.__trace__(6, 8, `console.log(33)`, {});',
                '    console.log(33);',
                '    gushio.__trace__(5, 4, `condition`, {',
                '      "loopType": "while"',
                '    });',
                '  }',
                '  gushio.__trace__(9, 4, `condition`, {',
                '    "loopType": "while"',
                '  });',
                '  while (condition) {',
                '    gushio.__trace__(10, 8, `console.log(33)`, {});',
                '    console.log(33);',
                '    gushio.__trace__(9, 4, `condition`, {',
                '      "loopType": "while"',
                '    });',
                '  }',
                '};'
            ].join('\n')
        })

        codeTransformations.set('do while', {
            before: [
                'do {',
                '    console.log(33)',
                '} while (condition)',
                'export const run = async () => {',
                '    do {',
                '        console.log(33)',
                '    } while (condition)',
                '',
                '    do',
                '        console.log(33);',
                '    while (condition)',
                '}'
            ].join('\n'),
            after: [
                'do {',
                '  gushio.__trace__(2, 4, `console.log(33)`, {});',
                '  console.log(33);',
                '} while (condition);',
                'export const run = async () => {',
                '  do {',
                '    gushio.__trace__(6, 8, `console.log(33)`, {});',
                '    console.log(33);',
                '    gushio.__trace__(5, 4, `condition`, {',
                '      "loopType": "do-while"',
                '    });',
                '  } while (condition);',
                '  do {',
                '    gushio.__trace__(10, 8, `console.log(33);`, {});',
                '    console.log(33);',
                '    gushio.__trace__(9, 4, `condition`, {',
                '      "loopType": "do-while"',
                '    });',
                '  } while (condition);',
                '};'
            ].join('\n')
        })

        codeTransformations.set('for', {
            before: [
                'for (let i = 0; i < 10; i += 2) {',
                '    console.log(i)',
                '}',
                'export const run = async () => {',
                '    for (let i = 0; i < 10; i += 2) {',
                '        console.log(i)',
                '    }',
                '',
                '    for (let i = 0; i < 10; i += 2)',
                '        console.log(i)',
                '}'
            ].join('\n'),
            after: [
                'for (let i = 0; i < 10; i += 2) {',
                '  gushio.__trace__(2, 4, `console.log(i)`, {});',
                '  console.log(i);',
                '}',
                'export const run = async () => {',
                '  gushio.__trace__(5, 4, `let i = 0`, {',
                '    "loopType": "for"',
                '  });',
                '  gushio.__trace__(5, 4, `i < 10`, {',
                '    "loopType": "for"',
                '  });',
                '  for (let i = 0; i < 10; i += 2) {',
                '    gushio.__trace__(6, 8, `console.log(i)`, {});',
                '    console.log(i);',
                '    gushio.__trace__(5, 4, `i += 2`, {',
                '      "loopType": "for"',
                '    });',
                '    gushio.__trace__(5, 4, `i < 10`, {',
                '      "loopType": "for"',
                '    });',
                '  }',
                '  gushio.__trace__(9, 4, `let i = 0`, {',
                '    "loopType": "for"',
                '  });',
                '  gushio.__trace__(9, 4, `i < 10`, {',
                '    "loopType": "for"',
                '  });',
                '  for (let i = 0; i < 10; i += 2) {',
                '    gushio.__trace__(10, 8, `console.log(i)`, {});',
                '    console.log(i);',
                '    gushio.__trace__(9, 4, `i += 2`, {',
                '      "loopType": "for"',
                '    });',
                '    gushio.__trace__(9, 4, `i < 10`, {',
                '      "loopType": "for"',
                '    });',
                '  }',
                '};'
            ].join('\n')
        })

        codeTransformations.set('for of', {
            before: [
                'for (let x of something()) {',
                '    console.log(x)',
                '}',
                'export const run = async () => {',
                '    for (let x of something()) {',
                '        console.log(x)',
                '    }',
                '',
                '    for (let x of something())',
                '        console.log(x)',
                '}'
            ].join('\n'),
            after: [
                'for (let x of something()) {',
                '  gushio.__trace__(2, 4, `console.log(x)`, {});',
                '  console.log(x);',
                '}',
                'export const run = async () => {',
                '  gushio.__trace__(5, 4, `let x of something()`, {',
                '    "loopType": "for-of"',
                '  });',
                '  for (let x of something()) {',
                '    gushio.__trace__(6, 8, `console.log(x)`, {});',
                '    console.log(x);',
                '    gushio.__trace__(5, 4, `let x of something()`, {',
                '      "loopType": "for-of"',
                '    });',
                '  }',
                '  gushio.__trace__(9, 4, `let x of something()`, {',
                '    "loopType": "for-of"',
                '  });',
                '  for (let x of something()) {',
                '    gushio.__trace__(10, 8, `console.log(x)`, {});',
                '    console.log(x);',
                '    gushio.__trace__(9, 4, `let x of something()`, {',
                '      "loopType": "for-of"',
                '    });',
                '  }',
                '};'
            ].join('\n')
        })

        codeTransformations.set('for await of', {
            before: [
                'for await (let x of something()) {',
                '    console.log(x)',
                '}',
                'export const run = async () => {',
                '    for await (let x of something()) {',
                '        console.log(x)',
                '    }',
                '',
                '    for await (let x of something())',
                '        console.log(x)',
                '}'
            ].join('\n'),
            after: [
                'for await (let x of something()) {',
                '  gushio.__trace__(2, 4, `console.log(x)`, {});',
                '  console.log(x);',
                '}',
                'export const run = async () => {',
                '  gushio.__trace__(5, 4, `let x of something()`, {',
                '    "loopType": "for-await-of"',
                '  });',
                '  for await (let x of something()) {',
                '    gushio.__trace__(6, 8, `console.log(x)`, {});',
                '    console.log(x);',
                '    gushio.__trace__(5, 4, `let x of something()`, {',
                '      "loopType": "for-await-of"',
                '    });',
                '  }',
                '  gushio.__trace__(9, 4, `let x of something()`, {',
                '    "loopType": "for-await-of"',
                '  });',
                '  for await (let x of something()) {',
                '    gushio.__trace__(10, 8, `console.log(x)`, {});',
                '    console.log(x);',
                '    gushio.__trace__(9, 4, `let x of something()`, {',
                '      "loopType": "for-await-of"',
                '    });',
                '  }',
                '};'
            ].join('\n')
        })

        codeTransformations.set('for in', {
            before: [
                'for (let x in something) {',
                '    console.log(x)',
                '}',
                'export const run = async () => {',
                '    for (let x in something) {',
                '        console.log(x)',
                '    }',
                '',
                '    for (let x in something)',
                '        console.log(x)',
                '}'
            ].join('\n'),
            after: [
                'for (let x in something) {',
                '  gushio.__trace__(2, 4, `console.log(x)`, {});',
                '  console.log(x);',
                '}',
                'export const run = async () => {',
                '  gushio.__trace__(5, 4, `let x in something`, {',
                '    "loopType": "for-in"',
                '  });',
                '  for (let x in something) {',
                '    gushio.__trace__(6, 8, `console.log(x)`, {});',
                '    console.log(x);',
                '    gushio.__trace__(5, 4, `let x in something`, {',
                '      "loopType": "for-in"',
                '    });',
                '  }',
                '  gushio.__trace__(9, 4, `let x in something`, {',
                '    "loopType": "for-in"',
                '  });',
                '  for (let x in something) {',
                '    gushio.__trace__(10, 8, `console.log(x)`, {});',
                '    console.log(x);',
                '    gushio.__trace__(9, 4, `let x in something`, {',
                '      "loopType": "for-in"',
                '    });',
                '  }',
                '};'
            ].join('\n')
        })

        test.each([...codeTransformations.entries()])('trace %s', async (name, code) => {
            expect(await transformCode(code.before, true)).toBe(code.after)
        })

        test('no trace', async () => {
            expect(await transformCode('some code', false)).toBe('some code')
        })
    })
})